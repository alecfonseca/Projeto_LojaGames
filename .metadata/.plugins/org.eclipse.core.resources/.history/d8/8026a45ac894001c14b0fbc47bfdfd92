package com.generation.lojagames.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.generation.lojagames.model.Categoria;
import com.generation.lojagames.model.Produto;
import com.generation.lojagames.repository.CategoriaRepository;
import com.generation.lojagames.repository.ProdutoRepository;

@RestController
@RequestMapping("/produto")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class ProdutoController {
	
	@Autowired
	private CategoriaRepository categoriaRepository;
	
	@Autowired
	private ProdutoRepository produtoRepository;
	
	@GetMapping("/nome/{nome}") // n podem existir 2 getmapping iguais
	public ResponseEntity<List<Produto>> getByNome(@PathVariable String nome) {
		// o List nÃ£o gera erro igual findById pois ele n gera null, gera uma lista
		// vazia
		return ResponseEntity.ok(produtoRepository.findAllByProdutoContainingIgnoreCase(nome));
	} // select * from tb_postagens where titulo like "%titulo%";

	@PostMapping
	public ResponseEntity<Produto> postPostagem(@Valid @RequestBody Produto produto) {
		if (categoriaRepository.existsById(produto.getCategoria().getId()))
			return ResponseEntity.status(HttpStatus.CREATED).body(produtoRepository.save(produto));

		return ResponseEntity.notFound().build();

		// ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));
		// chamo o status Created e no corpo do meu status eu salvo o objeto postagem e
		// recebo o ok
	}

	@PutMapping
	public ResponseEntity<Produto> putProduto(@Valid @RequestBody Produto produto) {
		if (categoriaRepository.existsById(Categoria.getProduto().getId())) {
			return produtoRepository.findById(produto.getId()) // procura pelo id
					.map(resposta -> ResponseEntity.status(HttpStatus.OK).body(produtoRepository.save(produto)))
					// realiza se resposta n for nulla
					.orElse(ResponseEntity.notFound().build());
			// realiza se a resposta for nulla
		}
		return ResponseEntity.notFound().build();

	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Object> deletePostagem(@PathVariable Long id) { // postagemRepository.deleteById(id);
		return produtoRepository.findById(id).map(resposta -> {
			produtoRepository.deleteById(id);
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}).orElse(ResponseEntity.notFound().build());
	}

}
